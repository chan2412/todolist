{"version":3,"sources":["post.js","App.js","serviceWorker.js","index.js"],"names":["Post","this","props","body","Button","variant","color","onClick","delete","Component","App","deleteEvent","index","copyPostArray","Object","assign","state","postArray","splice","setState","PostId","setPost","element","b","target","value","Body","addPost","push","id","document","getElementById","AppBar","style","background","Container","fixed","position","border","paddingTop","paddingLeft","paddingRight","width","TextField","label","type","onChange","map","post","key","bind","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mRAEqBA,E,iLAGnB,OACC,6BAAK,4BACNC,KAAKC,MAAMC,KAAK,6BACf,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAASN,KAAKC,MAAMM,QAAhE,gB,GAN+BC,aC4DnBC,E,YAvDd,WAAYR,GAAQ,IAAD,8BAClB,4CAAMA,KAORS,YAAY,SAACC,GACZ,IAAMC,EAAcC,OAAOC,OAAO,GAAG,EAAKC,MAAMC,WAC/CJ,EAAcK,OAAON,EAAM,GAC3B,EAAKO,SAAS,CAACF,UAAUJ,IACzB,EAAKO,OAAO,EAAKA,OAAO,GAZN,EAcpBC,QAAQ,SAACC,GACP,IAAIC,EAAGD,EAAQE,OAAOC,MACtB,EAAKN,SAAS,CAACO,KAAKH,KAhBF,EAkBpBI,QAAQ,WAEN,EAAKP,OAAO,EAAKA,OAAO,EACxB,IAAMP,EAAcC,OAAOC,OAAO,GAAG,EAAKC,MAAMC,WAChDJ,EAAce,KAAK,CACjBC,GAAG,EAAKT,OACRjB,KAAM,EAAKa,MAAMU,OAEI,KAApB,EAAKV,MAAMU,OACd,EAAKP,SAAS,CAACF,UAAUJ,IACzBiB,SAASC,eAAe,KAAKN,MAAM,KA1BnC,EAAKL,OAAO,EACZ,EAAKJ,MAAM,CACTC,UAAU,GACVS,KAAK,GAAGG,GAAG,IALK,E,sEAiCjB,IAAD,OACE,OACE,6BACC,kBAACG,EAAA,EAAD,CAAQ3B,QAAQ,YAAYC,MAAM,YAAY2B,MAAO,CAACC,WAAW,qDAClE,2CAEA,6BAAK,6BAAK,6BAAK,6BACf,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACH,MAAO,CAACC,WAAW,mDAAoDG,SAAS,WAAWC,OAAO,QAAQC,WAAW,OAAOC,YAAY,OAAOC,aAAa,QAAQC,MAAM,UAC3L,kBAACC,EAAA,EAAD,CAAYC,MAAM,qBAAqBf,GAAG,IAAII,MAAO,CAAC3B,MAAM,SAAWD,QAAQ,WAAWwC,KAAK,OAAOC,SAAU7C,KAAKoB,UAAU,kBAACjB,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAASN,KAAK0B,SAA1D,OAC7H,4BACI1B,KAAKe,MAAMC,UAAU8B,KAAI,SAACC,EAAKpC,GAC/B,OACE,kBAAC,EAAD,CAAMqC,IAAKD,EAAKnB,GAAIA,GAAImB,EAAKnB,GAAI1B,KAAM6C,EAAK7C,KAAMK,OAAQ,EAAKG,YAAYuC,KAAK,EAAKtC,e,GA9CjFH,aCME0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS3B,SAASC,eAAe,SD6H3C,kBAAmB2B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cf498ccd.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport Button from \"@material-ui/core/Button\";\r\nexport default class Post extends Component{\r\n\trender()\r\n\t{\r\n\t\treturn(\r\n\t\t\t<div><li>\r\n\t{this.props.body}<br/>\r\n   <Button variant=\"contained\" color=\"primary\" onClick={this.props.delete}>Delete</Button>\r\n   </li></div>)\r\n\t}\r\n}","import React,{Component} from 'react';\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Post from'./post.js';\r\nclass App extends Component{\r\n constructor(props) {\r\n  super(props);\r\n  this.PostId=0;\r\n  this.state={\r\n    postArray:[ ],\r\n    Body:\"\",id:\"\",\r\n  };\r\n}\r\ndeleteEvent=(index)=>\r\n{const copyPostArray=Object.assign([],this.state.postArray);\r\n  copyPostArray.splice(index,1);\r\n  this.setState({postArray:copyPostArray});\r\n  this.PostId=this.PostId-1;\r\n}\r\nsetPost=(element)=>{\r\n  var b= element.target.value;\r\n  this.setState({Body:b});\r\n}\r\naddPost=()=>\r\n{\r\n  this.PostId=this.PostId+1;\r\n  const copyPostArray=Object.assign([],this.state.postArray);\r\n  copyPostArray.push({\r\n    id:this.PostId,\r\n    body: this.state.Body,\r\n  });\r\n  if(this.state.Body !== \"\"){\r\n  this.setState({postArray:copyPostArray});\r\n  document.getElementById('i').value=\"\";\r\n}\r\n\r\n}\r\n  render()\r\n  {\r\n    return(\r\n      <div\r\n      ><AppBar variant=\"contained\" color=\"secondary\" style={{background:\"linear-gradient(45deg, #06beb6 60%, #48b1bf 70%)\"}}>\r\n      <h2>TO-DO APP!</h2>\r\n      </AppBar>\r\n      <br/><br/><br/><br/>\r\n      <Container fixed style={{background:\"linear-gradient(45deg, #06beb6 60%, #48b1bf 70%)\" ,position:\"absolute\",border:\"solid\",paddingTop:\"50px\",paddingLeft:\"50px\",paddingRight:\"100px\",width:\"320px\"}}>\r\n      <TextField  label=\"Enter the new task\" id=\"i\" style={{color:\"white\"}}  variant=\"outlined\" type=\"text\" onChange={this.setPost}/><Button variant=\"contained\" color=\"primary\" onClick={this.addPost}>Add</Button>\r\n        <ul>{\r\n            this.state.postArray.map((post,index)=>{\r\n            return (\r\n              <Post key={post.id} id={post.id} body={post.body} delete={this.deleteEvent.bind(this,index)} />\r\n            )\r\n            }\r\n          )\r\n        }\r\n</ul></Container>\r\n    </div>\r\n    )\r\n  }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}